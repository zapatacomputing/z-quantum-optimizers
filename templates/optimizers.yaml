spec:
  templates:
    - name: optimize-variational-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: backend-specs
          - name: optimizer-specs
          - name: cost-function-specs
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: ansatz
            path: /app/ansatz.json
          - name: initial-parameters
            path: /app/initial_parameters.json
          - name: qubit-operator
            path: /app/qubitop.json
          - name: noise-model
            path: /app/noise_model.json
            optional: True
          - name: device-connectivity
            path: /app/device_connectivity.json
            optional: True
          - name: parameter-grid
            path: /app/parameter_grid.json
            optional: True
          - name: constraint-operator
            path: /app/constraint_operator.json
            optional: True
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                qvm -S &
                quilc -S &
                source /app/usr/local/bin/compilers_and_libraries.sh
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                import os
                from zquantum.optimizers.utils import save_optimization_results
                from zquantum.core.circuit import (
                    load_circuit_template,
                    load_circuit_template_params,
                    save_circuit_template_params,
                    load_parameter_grid,
                    load_circuit_connectivity,
                )
                from qeopenfermion import load_qubit_operator
                from zquantum.core.utils import create_object, load_noise_model
                import json

                ansatz = load_circuit_template("ansatz.json")

                if os.path.isfile("initial_parameters.json"):
                    initial_parameters = load_circuit_template_params("initial_parameters.json")
                else:
                    initial_parameters = None

                # Load qubit op
                operator = load_qubit_operator("qubitop.json")

                # Load parameter grid
                if os.path.isfile("parameter_grid.json"):
                    grid = load_parameter_grid("parameter_grid.json")
                else:
                    grid = None
                optimizer_specs = {{inputs.parameters.optimizer-specs}}
                if grid is not None and optimizer_specs["function_name"] == "GridSearchOptimizer":
                    optimizer = create_object(optimizer_specs, grid=grid)
                else:
                    optimizer = create_object(optimizer_specs)

                backend_specs = {{inputs.parameters.backend-specs}}
                if os.path.isfile("noise_model.json"):
                    backend_specs["noise_model"] = load_noise_model("noise_model.json")
                if os.path.isfile("device_connectivity.json"):
                    backend_specs["device_connectivity"] = load_circuit_connectivity(
                        "device_connectivity.json"
                    )
                backend = create_object(backend_specs)

                cost_function_specs = {{inputs.parameters.cost-function-specs}}
                cost_function_specs["target_operator"] = operator
                cost_function_specs["ansatz"] = ansatz
                cost_function_specs["backend"] = backend
                cost_function = create_object(cost_function_specs)
                if os.path.isfile("constraint_operator.json"):
                    constraint_operator = load_qubit_operator("constraint_operator.json")
                    cost_function_specs["target_operator"] = constraint_operator
                    constraint_cost_function = create_object(cost_function_specs)
                    constraint_functions = ({"type": "eq", "fun": constraint_cost_function.evaluate},)
                    optimizer.constraints = constraint_functions

                opt_results = optimizer.minimize(cost_function, initial_parameters)

                save_optimization_results(opt_results, "optimization-results.json")
                save_circuit_template_params(opt_results.opt_params, "optimized_parameters.json"
        outputs:
          artifacts:
            - name: optimization-results
              path: /app/optimization-results.json
            - name: optimized-parameters
              path: /app/optimized_parameters.json
