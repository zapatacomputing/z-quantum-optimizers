# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: extract-xfav-cmaes-params

imports:
- name: z-quantum-optimizers
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "dev"
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "dev"
- name: qe-openfermion
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "dev"

steps:
- name: get-initial-parameters
  config:
    runtime:
      language: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/steps/circuit.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockAnsatz", "number_of_layers": 2, "problem_size": 4}'
      type: string
    - min_value: -1.57
      type: float
    - max_value: 1.57
      type: float
    - seed: 9
      type: int
    - number_of_parameters: "None"
      type: string
  outputs:
    - name: params
      type: ansatz-params
- name: get-operator
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion]
      parameters:
        file: qe-openfermion/steps/operators.py
        function: get_number_operator
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - number_of_qubits: 4
    type: int
  - number_of_particles: "None"
    type: string
  outputs:
  - name: number-operator
    type: operator
- name: transform-operator
  passed: [get-operator]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion]
      parameters:
        file: qe-openfermion/steps/transforms.py
        function: transform_interaction_operator
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - transformation: "Jordan-Wigner"
    type: string
  - input_operator: ((get-operator.number-operator))
    type: operator
  outputs:
  - name: transformed-operator
    type: operator
- name: optimize-circuit
  passed: [get-initial-parameters, transform-operator]
  config:
    runtime:
      language: python3
      imports:  [z-quantum-core, qe-openfermion, z-quantum-optimizers]
      parameters:
        file: z-quantum-optimizers/steps/optimizers.py
        function: optimize_variational_circuit
    resources:
      cpu: "1000m"
      memory: "2Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockAnsatz", "number_of_layers": 2, "problem_size": 4}'
      type: string
    - backend_specs: '{"module_name": "zquantum.core.interfaces.mock_objects", "function_name": "MockQuantumSimulator", "n_samples": 10}'
      type: string
    - optimizer_specs: '{"module_name": "zquantum.optimizers.cma_es_optimizer", "function_name": "CMAESOptimizer", "options": {"popsize": 5, "sigma_0": 0.1, "tolx": 1e-6, "seed": 9}}'
      type: string
    - cost_function_specs: '{"module_name": "zquantum.core.cost_function", "function_name": "AnsatzBasedCostFunction", "estimator-specs": {"module_name": "zquantum.core.estimator", "function_name": "ExactEstimator"}}'
      type: string
    - qubit_operator: ((transform-operator.transformed-operator))
      type: operator
    - initial_parameters: ((get-initial-parameters.params))
      type: ansatz-params
    - fixed_parameters: "None"
      type: string
    - noise_model: "None"
      type: string
    - device_connectivity: "None"
      type: string
    - parameter_grid: "None"
      type: string
    - constraint_operator: "None"
      type: string
  outputs:
    - name: optimization-results
      type: opt-results
    - name: optimized-parameters
      type: ansatz-params
- name: extract-params
  passed: [optimize-circuit]
  config:
    runtime:
      language: python3
      imports:  [z-quantum-core, qe-openfermion, z-quantum-optimizers]
      parameters:
        file: z-quantum-optimizers/steps/optimizers.py
        function: extract_xfav_params_from_cma_es_opt_results
    resources:
      cpu: "1000m"
      memory: "2Gi"
  inputs:
    - optimization_results: ((optimize-circuit.optimization-results))
      type: opt-results
  outputs:
    - name: fav-params
      type: ansatz-params

types:
 - ansatz-params
 - operator
 - opt-results
